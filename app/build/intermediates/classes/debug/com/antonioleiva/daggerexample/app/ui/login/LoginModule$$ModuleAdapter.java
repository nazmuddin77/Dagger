// Code generated by dagger-compiler.  Do not edit.
package com.antonioleiva.daggerexample.app.ui.login;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class LoginModule$$ModuleAdapter extends ModuleAdapter<LoginModule> {
  private static final String[] INJECTS = { "members/com.antonioleiva.daggerexample.app.ui.login.LoginActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public LoginModule$$ModuleAdapter() {
    super(com.antonioleiva.daggerexample.app.ui.login.LoginModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, LoginModule module) {
    bindings.contributeProvidesBinding("com.antonioleiva.daggerexample.app.ui.login.LoginView", new ProvideViewProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.antonioleiva.daggerexample.app.ui.login.LoginPresenter", new ProvidePresenterProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.antonioleiva.daggerexample.app.ui.login.LoginView>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.antonioleiva.daggerexample.app.ui.login.LoginView>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideViewProvidesAdapter extends ProvidesBinding<LoginView>
      implements Provider<LoginView> {
    private final LoginModule module;

    public ProvideViewProvidesAdapter(LoginModule module) {
      super("com.antonioleiva.daggerexample.app.ui.login.LoginView", IS_SINGLETON, "com.antonioleiva.daggerexample.app.ui.login.LoginModule", "provideView");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.antonioleiva.daggerexample.app.ui.login.LoginView>}.
     */
    @Override
    public LoginView get() {
      return module.provideView();
    }
  }

  /**
   * A {@code Binding<com.antonioleiva.daggerexample.app.ui.login.LoginPresenter>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.antonioleiva.daggerexample.app.ui.login.LoginPresenter} and its
   * dependencies.
   *
   * Being a {@code Provider<com.antonioleiva.daggerexample.app.ui.login.LoginPresenter>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidePresenterProvidesAdapter extends ProvidesBinding<LoginPresenter>
      implements Provider<LoginPresenter> {
    private final LoginModule module;
    private Binding<LoginView> loginView;
    private Binding<com.antonioleiva.daggerexample.app.interactors.LoginInteractor> loginInteractor;

    public ProvidePresenterProvidesAdapter(LoginModule module) {
      super("com.antonioleiva.daggerexample.app.ui.login.LoginPresenter", IS_SINGLETON, "com.antonioleiva.daggerexample.app.ui.login.LoginModule", "providePresenter");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      loginView = (Binding<LoginView>) linker.requestBinding("com.antonioleiva.daggerexample.app.ui.login.LoginView", LoginModule.class, getClass().getClassLoader());
      loginInteractor = (Binding<com.antonioleiva.daggerexample.app.interactors.LoginInteractor>) linker.requestBinding("com.antonioleiva.daggerexample.app.interactors.LoginInteractor", LoginModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(loginView);
      getBindings.add(loginInteractor);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.antonioleiva.daggerexample.app.ui.login.LoginPresenter>}.
     */
    @Override
    public LoginPresenter get() {
      return module.providePresenter(loginView.get(), loginInteractor.get());
    }
  }
}
